name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Run tests and build on PRs and pushes
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: npm test
      continue-on-error: true
    
    - name: Build project
      run: npm run build
    
    - name: Test MCP server functionality
      run: node final-test.js
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/
          package.json
        retention-days: 30

  # Version and publish only on pushes to main
  release:
    name: Version and Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
    
    - name: Determine version bump
      id: version
      run: |
        # Get the last commit message
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"
        
        # Determine version bump type based on commit message
        if echo "$COMMIT_MSG" | grep -qiE "(breaking|major):"; then
          echo "bump=major" >> $GITHUB_OUTPUT
          echo "Version bump: major"
        elif echo "$COMMIT_MSG" | grep -qiE "(feat|feature|minor):"; then
          echo "bump=minor" >> $GITHUB_OUTPUT
          echo "Version bump: minor"
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
          echo "Version bump: patch"
        fi
    
    - name: Bump version
      run: |
        npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Build for production
      run: npm run build
    
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create Git tag
      run: |
        git add package.json package-lock.json
        git commit -m "chore: bump version to v${{ env.NEW_VERSION }}"
        git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
        git push origin main
        git push origin "v${{ env.NEW_VERSION }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          ## Changes in v${{ env.NEW_VERSION }}
          
          This release was automatically generated from the latest changes in the main branch.
          
          ### Installation
          ```bash
          npx rightmove-mcp-server@${{ env.NEW_VERSION }}
          ```
          
          ### MCP Client Configuration
          ```json
          {
            "mcpServers": {
              "rightmove": {
                "command": "npx",
                "args": ["rightmove-mcp-server@${{ env.NEW_VERSION }}"]
              }
            }
          }
          ```
          
          For more details, see the [README](https://github.com/jmountifield/rightmove-mcp/blob/main/README.md).
        draft: false
        prerelease: false