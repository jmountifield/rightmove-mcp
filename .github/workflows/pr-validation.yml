name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20'

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: npm test
      continue-on-error: true
    
    - name: Build project
      run: npm run build
    
    - name: Test MCP server functionality
      run: node final-test.js
    
    - name: Check package.json
      run: |
        echo "Validating package.json..."
        node -e "
          const pkg = require('./package.json');
          if (!pkg.name || !pkg.version || !pkg.description) {
            console.error('❌ Missing required package.json fields');
            process.exit(1);
          }
          if (!pkg.bin || !pkg.bin['rightmove-mcp-server']) {
            console.error('❌ Missing or invalid bin configuration');
            process.exit(1);
          }
          console.log('✅ package.json validation passed');
        "
    
    - name: Validate commit message format
      run: |
        # Get PR title and check if it follows conventional commit format
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"
        
        if echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|major|minor)(\(.+\))?: .+"; then
          echo "✅ PR title follows conventional commit format"
        else
          echo "⚠️ PR title should follow conventional commit format (feat|fix|docs|style|refactor|test|chore|major|minor): description"
          echo "Examples:"
          echo "  feat: add new property search filters"
          echo "  fix: resolve URL building issue"
          echo "  docs: update README with new examples"
          echo "  major: breaking change to API structure"
        fi
    
    - name: Check for version bump requirement
      run: |
        echo "Checking if version bump is needed..."
        
        # Check if package.json was modified
        if git diff --name-only origin/main...HEAD | grep -q "package.json"; then
          echo "✅ package.json was modified - version may be updated"
        else
          echo "ℹ️ package.json not modified - version will be auto-bumped on merge"
        fi
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🤖 PR Validation Results')
          );
          
          const commentBody = `🤖 **PR Validation Results**
          
          ✅ Build successful
          ✅ Tests completed
          ✅ MCP server functionality verified
          ✅ Package configuration valid
          
          **Next Steps:**
          - Once merged to main, version will be automatically bumped based on commit message
          - Package will be automatically published to NPM
          - GitHub release will be created
          
          **Version Bump Rules:**
          - \`major:\` or \`breaking:\` → Major version bump
          - \`feat:\` or \`feature:\` or \`minor:\` → Minor version bump  
          - Everything else → Patch version bump
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }